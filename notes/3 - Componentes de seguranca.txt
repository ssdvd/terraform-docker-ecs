Security Group load balance:

para criarmos nosso load balance, antes devemos criar nosso grupo de seguranca, e com
o seguinte bloco de codigo:

resource "aws_security_group" "alb" {
  name        = "alb-ecs"
  vpc_id      = module.vpc.vpc_id
}

estaremos criando um recurso aws_security_group com o nome de alb, e com o 
name        = "alb-ecs", utilizando nossa vpc vpc_id      = module.vpc.vpc_id,
tendo assim ja vinculando nosso sg do alb. E com o seguinte bloco de cod:

resource "aws_security_group_rule" "tcp_alb" {
  type              = "ingress"
  from_port         = 8000
  to_port           = 8000
  protocol          = "tcp"
  cidr_blocks       = ["0.0.0.0/0"]
  security_group_id = aws_security_group.alb.id
}

aqui estamos definindo nossas regras de entrada, representado ai no type = "ingress"
e sinalizando que a porta 8000 sera a que recebera a regra , ira aceitar o protocolo
tcp e podera aceitar conexao de todos os ipv4, e ja estara utilizando nosso sg criado
anteriormente. E ja aqui:

resource "aws_security_group_rule" "tcp_alb" {
  type              = "egress"
  from_port         = 0
  to_port           = 0
  protocol          = "-1"
  cidr_blocks       = ["0.0.0.0/0"]
  security_group_id = aws_security_group.alb.id
}

estamos criando nossa regra de saida, sinalizado por type = "egress", e estamos sinalizando
que todas as portas poderao ser usadas para a saida, e o -1 representa que iremos 
trabalhar com qualquer protocolo de saida, de todos os ipv4 que entrarem e tambem
ja estamos utilizando o sg criado anteriormente.

Security Group da rede privada:

e tambem iremos criar nossa rede privada, e para isso utilizamos o seguinte bloco 
de cod:

resource "aws_security_group" "privado" {
  name        = "privado-ecs"
  vpc_id      = module.vpc.vpc_id
}

aqui estamos criando o recurso aws_security_group com o nome privado, onde o nome logico
e privado-ecs e tambem ja vinculando a vpc, com isso feito, devemos denifir nossa regra
de entrada para essa subnet privada, com o bloco de cod:

resource "aws_security_group_rule" "entrada-ecs" {
  type              = "ingress"
  from_port         = 0
  to_port           = 0
  protocol          = "-1"
  source_security_group_id = aws_security_group.alb.id
  security_group_id = aws_security_group.privado.id
}

estamos criando um recurso aws_security_group_rule com o nome de entrada-ecs, do tipo
ingress quais sao as regras de entreda da nossa subnet privada, recebendo de qualquer
porta e de qualquer protocolo, porem so iremos aceitar as requisicoes se elas vierem
do nosso security group do alb, e tambem ja vinculamos com o sg que criamos antes. E 
agora iremos definir nossa regra de saida, com o bloco de cod:

resource "aws_security_group_rule" "saida-ecs" {
  type              = "egress"
  from_port         = 0
  to_port           = 0
  protocol          = "-1"
  cidr_blocks       = ["0.0.0.0/0"]
  security_group_id = aws_security_group.privado.id
}

estamos criando um recurso aws_security_group_rule com o nome saida-ecs, que e do tipo
saida, respondendo de qualquer porta, qualquer protocolo e tambem para qualquer ip, ja
que na saida devemos nos comunicarmos com os clients.

Configurando o IAM:

para criamos a role no iam para esse servico, iremos criar um novo arquivo para
o iam, o arquivo sera o iam.tf e nele ficara tudo relacionado ao mesmo, inserimos 
o seguinte bloco de cod:

resource "aws_iam_role" "cargo" {
  name = "${var.cargo-iam}-cargo"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Sid    = ""
        Principal = {
          Service = ["ec2.amazonaws.com",
                     "ecs-tasks.amazon.com"]
        }
      },
    ]
  })
}

estamos criando o recurso aws_iam_role com o nome de cargo, adicionando uma variavel
para nomear esse recurso a var.cargo-iam, sera criada no arquivo variaveis.tf e sera
denida na pasta do ambiente, no caso de uso sera o prod e recebera esse mesmo valor,
agora iremos criar uma politica para utilizar na role criada, com o seguinte bloco de
cod:

resource "aws_iam_role_policy" "ecs-ecr" {
  name = "ecs-ecr"
  role = aws_iam_role.cargo.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "ecr:GetAuthorizationToken",
          "ecr:BatchCheckLayerAvailability",
          "ecr:GetDownloadUrlForLayer",
          "ecr:BactchGetImage",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Effect   = "Allow"
        Resource = "*"
      },
    ]
  })
}

estamos criando o recurso aws_iam_role_policy com o nome tambem de ecs-ecr, o nome do
recurso tambem, associamos essa polica a role que criamos com o nome de cargo em 
role = aws_iam_role.cargo.id, em seguida aplicamos todas as permissoes que serao
necessaria para o manuseio, essas permissoes ja foram vistas anteriomente.feito isso
iremos criar nosso perfil para as instancias no iam, com o seguinte bloco de cod:

resource "aws_iam_instance_profile" "perfil" {
  name = "${var.cargo-iam}-perfil"
  role = aws_iam_role.cargo.name
}

estamos criando o recurso aws_iam_instance_profile com o nome de perfil, o nome que
estamos dando a esse perfil ira acompanhar a nossa variavel var.cargo-iam-perfil,
assim ficara mais facil do que ambiente se trata esse perfil e em seguida assossiamos
a role recem criada a esse perfil de instancias.

Nesta aula aprendemos:

As diferenças entres grupos de segurança para redes públicas e privadas, nas quais as 
redes públicas recebem todas as requisições vindas da internet e as redes privadas 
recebem apenas de outras redes e não tem uma conexão direta com a internet.

Quais as possibilidades para liberar as entradas dos grupos de segurança, tendo o 
CIDR ou outro grupo de segurança como possibilidades.

Configurar os recursos do IAM, como o cargo e as políticas da aplicação; esses recursos 
fornecem as permissões que são necessárias para que a aplicação possa ser executada com 
segurança.